import { useState, useEffect, useCallback, useRef } from "react";
import { useNavigate } from "react-router-dom";
import { useSelector } from "react-redux";
import { useTranslation } from "react-i18next";

import RegionChoosingComponent from "../regionChosingComponent/regionChoosingComponent";
import MergeComponent from "../mergeComponent/mergeComponent";
import PersonaChoosing from "../personaChoosing/personaChoosing";
import OpenFolderComponent from "../openFolderComponent/openFolderComponent";
import "./videoImportComponent.scss";

const STALL_MS = 3000;       // —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –∑–∞—Å—Ç—Ä—è–ª, –µ—Å–ª–∏ –Ω–µ—Ç —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∞–ø–¥–µ–π—Ç–∞ ‚â• 3—Å
const STEP_MIN_MS = 3000;    // —à–∞–≥ –∞–≤—Ç–æ-–Ω–∞–∫—Ä—É—Ç–∫–∏: 3‚Äì4—Å
const STEP_MAX_MS = 4000;

const VideoConverterImport = () => {
  const [file, setFile] = useState(null);
  const [filePath, setFilePath] = useState('');
  const [isDragging, setIsDragging] = useState(false);
  const [isProcessing, setIsProcessing] = useState(false);
  const [output, setOutput] = useState('');

  const links = useRef({
    "P5R": "https://amicitia.miraheze.org/wiki/Persona_5_Royal/ps4_movieR.cpk",
    "P5": "https://amicitia.miraheze.org/wiki/Persona_5/ps3.cpk/movie",
    "P4G": '',
    "P3R": "https://amicitia.miraheze.org/wiki/Persona_3_Reload/Anim"
  })

  const [progress, setProgressRef] = useState(0);
  const [status, setStatus] = useState('');

  const realPercentRef = useRef(0);            // –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–µ–∞–ª—å–Ω—ã–π % –æ—Ç Electron
  const lastRealChangeAtRef = useRef(0);       // –∫–æ–≥–¥–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑ –º–µ–Ω—è–ª—Å—è —Ä–µ–∞–ª—å–Ω—ã–π %
  const stallTimerRef = useRef(null);          // —Ç–∞–π–º–µ—Ä ¬´—Å—Ç–æ—Ä–æ–∂–∞¬ª –∑–∞–≤–∏—Å–∞–Ω–∏—è
  const tickTimerRef = useRef(null);           // —Ç–∞–π–º–µ—Ä –∞–≤—Ç–æ-–Ω–∞–∫—Ä—É—Ç–∫–∏
  const smoothingActiveRef = useRef(false);    // —Å–µ–π—á–∞—Å –∏–¥—ë—Ç –∞–≤—Ç–æ-–Ω–∞–∫—Ä—É—Ç–∫–∞?
  const stallBaseRef = useRef(0);              // X% ‚Äî –∑–Ω–∞—á–µ–Ω–∏–µ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –∑–∞–≤–∏—Å–ª–∏
  const stallCapRef = useRef(0);               // –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –ø–æ—Ç–æ–ª–æ–∫ X+9 (–Ω–æ –Ω–µ –≤—ã—à–µ 99)
  const uiPercentRef = useRef(0); // —á—Ç–æ —Å–µ–π—á–∞—Å —Ä–µ–∞–ª—å–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç UI (progress)

  const settings = useSelector((state) => state.settings);
  const region = settings.region;
  const merged = settings.merged;
  const personaChoose = settings.personaChoose;
  const openFolder = settings.openFolder;

  const navigate = useNavigate();

  const { t } = useTranslation();

  const getFileName = (filePath) => filePath.split(/[\\/]/).pop();

  const [urlInfo, setUrlInfo] = useState(personaChoose);

  const clearTimers = useCallback(() => {
    if (stallTimerRef.current) { clearTimeout(stallTimerRef.current); stallTimerRef.current = null; }
    if (tickTimerRef.current) { clearTimeout(tickTimerRef.current); tickTimerRef.current = null; }
    smoothingActiveRef.current = false;
  }, []);

  const resetProgressState = useCallback(() => {
    clearTimers();
    setProgressRef(0);
    setStatus('');
    realPercentRef.current = 0;
    lastRealChangeAtRef.current = 0;
    stallBaseRef.current = 0;
    stallCapRef.current = 0;
  }, [clearTimers]);

  const setProgressRefSafe = useCallback((next) => {
    // —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ª–∏–±–æ —á–∏—Å–ª–æ, –ª–∏–±–æ (prev) => —á–∏—Å–ª–æ
    if (typeof next === 'function') {
      setProgressRef(prev => {
        const val = next(prev);
        uiPercentRef.current = val;
        return val;
      });
    } else {
      uiPercentRef.current = next;
      setProgressRef(next);
    }
  }, []);


  const handleFileSelect = useCallback(async () => {
    try {
      const selectedPath = await window.electronAPI.selectFile();
      if (selectedPath) {
        const fileName = getFileName(selectedPath);
        processFile({ name: fileName, path: selectedPath, size: 0 }, selectedPath);
      }
    } catch (error) {
      setOutput(`‚ùå ${t("ErrorChoosingFile")}: ${error.message}`);
    }
  }, []);

  const handleDragOver = useCallback((event) => {
    event.preventDefault();
    setIsDragging(true);
  }, []);

  const handleDragLeave = useCallback((event) => {
    event.preventDefault();
    setIsDragging(false);
  }, []);

  const handleDrop = useCallback(async (event) => {
    event.preventDefault();
    setIsDragging(false);

    const droppedFile = event.dataTransfer.files[0];
    if (droppedFile) {
      const fileName = droppedFile.name.toLowerCase();
      if (fileName.endsWith('.usm')) {
        try {
          const fileInfo = await window.electronAPI.getFileInfo({
            name: droppedFile.name,
            path: droppedFile.path,
            size: droppedFile.size
          });

          if (fileInfo && fileInfo.path) {
            processFile(fileInfo, fileInfo.path);
          } else {
            setOutput(`‚ùå ${t("ErrorFindFilePath")}`);
          }
        } catch (error) {
          setOutput(`‚ùå ${t("ErrorProcessingFile")}: ${error.message}`);
        }
      } else {
        setOutput(`‚ùå ${t("ChooseUsmFile")}`);
      }
    } else {
      setOutput(`‚ùå ${t("FileNotChoosed")}`);
    }
  }, []);

  const processFile = useCallback((fileInfo, path) => {
    setFile(fileInfo);
    setFilePath(path);
    setOutput(`‚úÖ ${t("FileChoosed")}: ${fileInfo.name}\nüìÅ ${t("Path")}: ${path}`);
    setProgressRef(0);
    setStatus('');
  }, [region]);

  const executeCommand = useCallback(async () => {
    if (!filePath) {
      setOutput(`‚ùå ${t("FirstSelectYourFile")}`);
      return;
    }
    if (!region) {
      setOutput(`‚ùå ${t("FirstSelectYourRegion")}`);
      return;
    }

    console.log(`Version Choosed: ${personaChoose}`);

    setIsProcessing(true);
    setOutput(`üîÑ ${t("ExecutingACommand")}...`);
    resetProgressState();
    setProgressRef(1);
    setStatus(`${t("StatusStart")}...`);

    try {
      const result = await window.electronAPI.executeCommand(file, filePath, region, merged, personaChoose, openFolder);
      setStatus(`${t("StatusDone")}`);
      setProgressRef(100);
      setOutput(`‚úÖ ${t("CommandCompletedSuccessfully")}`);
      console.log(`${t("Success")} ${result}`);
    } catch (error) {
      setOutput(`‚ùå ${t("CommandExecutionError")}`);
      setStatus(`${t("Error")}: ${error.message}`);
      setProgressRef(100);
      console.error(`${t("Error!")} ${error.message}`);
    } finally {
      setIsProcessing(false);
      clearTimers();
    }
  }, [filePath, region, merged, personaChoose, resetProgressState, clearTimers]);

  const openResultFolder = useCallback(async () => {
    try {
      const result = await window.electronAPI.openResultDir();
      console.log(`${t("Successfully")} ${result}`);
    }
    catch (error) {
      console.error(`${t("ErrorOpeningFolder!")}`, error);
    }
  });

  const openLinkInBrowser = useCallback(async () => {
    try {
      const result = await window.electronAPI.openExternal(links.current[urlInfo]);
      console.log(`${t("Successfully")} ${result}`);
    }
    catch (error) {
      console.error(`Error`, error);
    }
  });

  const handleReset = useCallback(() => {
    setFile(null);
    setFilePath('');
    setOutput('');
    setProgressRef(0);
    setStatus('');
    resetProgressState();
  }, [resetProgressState]);

  const scheduleStallWatcher = useCallback(() => {
    // –µ—Å–ª–∏ —É–∂–µ –∏–¥—ë—Ç –Ω–∞–∫—Ä—É—Ç–∫–∞ ‚Äî –Ω–µ —Å—Ç–∞–≤–∏–º —Å—Ç–æ—Ä–æ–∂; –µ—Å–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ ‚Äî —Ç–æ–∂–µ
    if (smoothingActiveRef.current || realPercentRef.current >= 100) return;

    if (stallTimerRef.current) clearTimeout(stallTimerRef.current);

    // –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É —á–µ—Ä–µ–∑ STALL_MS –æ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    const remaining = Math.max(0, STALL_MS - (Date.now() - lastRealChangeAtRef.current));
    stallTimerRef.current = setTimeout(() => {
      // —É—Å–ª–æ–≤–∏—è —Å—Ç–∞—Ä—Ç–∞ –∏–º–∏—Ç–∞—Ü–∏–∏
      if (realPercentRef.current >= 100 || !isProcessing) return;

      // –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å ¬´–±–∞–∑—É¬ª –∏ –ø–æ—Ç–æ–ª–æ–∫ (X -> X+9, –Ω–æ –Ω–µ –±–æ–ª—å—à–µ 99)
      stallBaseRef.current = realPercentRef.current;
      stallCapRef.current = Math.min(stallBaseRef.current + 9, 99);

      // –µ—Å–ª–∏ —Ç–µ–∫—É—â–∏–π –ø–æ–∫–∞–∑–∞–Ω–Ω—ã–π —É–∂–µ >= –ø–æ—Ç–æ–ª–∫–∞ ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
      if (realPercentRef.current >= stallCapRef.current) {
        // –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å—Ç–æ—Ä–æ–∂–∏—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ –≤–æ–∑–º–æ–∂–Ω–æ–µ –∑–∞–≤–∏—Å–∞–Ω–∏–µ
        scheduleStallWatcher();
        return;
      }

      // –∑–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ-–Ω–∞–∫—Ä—É—Ç–∫—É
      smoothingActiveRef.current = true;

      const tick = () => {
        // —Å—Ç–æ–ø-—É—Å–ª–æ–≤–∏—è
        if (!isProcessing || realPercentRef.current >= 100) { clearTimers(); return; }

        // –µ—Å–ª–∏ –ø—Ä–∏—à—ë–ª —Ä–µ–∞–ª—å–Ω—ã–π –∞–ø–¥–µ–π—Ç –≤—ã—à–µ —Ç–µ–∫—É—â–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–≥–æ ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –µ–≥–æ –∏ –ø–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ—Ä–æ–∂
        if (realPercentRef.current > realPercentRef) {
          setProgressRef(p => Math.max(p, realPercentRef.current));
          smoothingActiveRef.current = false;
          scheduleStallWatcher();
          return;
        }

        // –µ—Å–ª–∏ –¥–æ–±—Ä–∞–ª–∏—Å—å –¥–æ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –ø–æ—Ç–æ–ª–∫–∞ ‚Äî –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–∫—Ä—É—Ç–∫—É –∏ —Å–Ω–æ–≤–∞ –∂–¥–∞—Ç—å —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∞–ø–¥–µ–π—Ç–∞/—Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–≤–∏—Å–∞–Ω–∏—è
        if (realPercentRef.current >= stallCapRef.current) {
          smoothingActiveRef.current = false;
          scheduleStallWatcher();
          return;
        }

        // –∏–Ω–∞—á–µ –∞–∫–∫—É—Ä–∞—Ç–Ω–æ –Ω–∞–∫—Ä—É—á–∏–≤–∞–µ–º +1%
        setProgressRef(p => Math.min(stallCapRef.current, p + 1));

        // —Å–ª–µ–¥—É—é—â–∏–π —Ç–∏–∫ —á–µ—Ä–µ–∑ 3‚Äì4 —Å–µ–∫
        const delay = Math.floor(STEP_MIN_MS + Math.random() * (STEP_MAX_MS - STEP_MIN_MS));
        tickTimerRef.current = setTimeout(tick, delay);
      };

      // –ø–µ—Ä–≤—ã–π —à–∞–≥ —Å—Ä–∞–∑—É
      tick();
    }, remaining);
  }, [clearTimers, isProcessing, realPercentRef.current]);

  useEffect(() => {
    file && console.log(`–ò–º—è —Ñ–∞–π–ª–∞: ${file.name}\n–ü—É—Ç—å —Ñ–∞–π–ª–∞: ${filePath}`);
  }, [file, filePath]);

  useEffect(() => {
    if (!window.electronAPI || !window.electronAPI.onProgress) return;

    const off = window.electronAPI.onProgress(({ percent, message }) => {
      if (typeof message === 'string') setStatus(message);

      const safe = Math.max(0, Math.min(100, Number(percent) || 0));
      const was = realPercentRef.current;

      // –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–µ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      realPercentRef.current = safe;

      // –µ—Å–ª–∏ —Ä–µ–∞–ª—å–Ω—ã–π % –∏–∑–º–µ–Ω–∏–ª—Å—è ‚Äî —Å–±—Ä–æ—Å–∏—Ç—å —Ç–∞–π–º–µ—Ä ¬´–∑–∞–≤–∏—Å–∞–Ω–∏—è¬ª –∏ –ø–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å
      if (safe !== was) {
        lastRealChangeAtRef.current = Date.now();
        // –µ—Å–ª–∏ —à–ª–∞ –Ω–∞–∫—Ä—É—Ç–∫–∞ ‚Äî –æ—Å—Ç–∞–Ω–æ–≤–∏–º –µ—ë (—Ä–µ–∞–ª—å–Ω—ã–π –∞–ø–¥–µ–π—Ç ‚Äî –≥–ª–∞–≤–Ω–µ–µ)
        if (smoothingActiveRef.current) {
          clearTimers(); // –æ—á–∏—â–∞–µ—Ç tick –∏ –ø–æ–º–µ—á–∞–µ—Ç smoothingActive=false
        }
      }

      // –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –º–∞–∫—Å–∏–º—É–º –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–≥–æ –∏ —Ä–µ–∞–ª—å–Ω–æ–≥–æ (–Ω–µ –æ—Ç–∫–∞—Ç—ã–≤–∞–µ–º –Ω–∞–∑–∞–¥)
      setProgressRef(prev => Math.max(prev, safe));

      // 100% ‚Äî –≤—Å—ë, –Ω–∏—á–µ–≥–æ –±–æ–ª—å—à–µ –Ω–µ –¥–µ–ª–∞–µ–º
      if (safe >= 100) {
        clearTimers();
        return;
      }

      // –∑–∞–Ω–æ–≤–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–æ—Ä–æ–∂ (–ø–µ—Ä–µ—Å—á–∏—Ç–∞–µ—Ç –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –¥–æ STALL_MS)
      scheduleStallWatcher();
    });

    return () => { if (typeof off === 'function') off(); };
  }, [scheduleStallWatcher, clearTimers]);

  // Cleanup –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => () => clearTimers(), [clearTimers]);

  useEffect(() => setUrlInfo(personaChoose), [personaChoose]);

  return (
    <>
      <RegionChoosingComponent />
      <PersonaChoosing />
      <MergeComponent />
      <OpenFolderComponent />

      <div className="video-import">
        <h1 className="video-import__title">{t("UsmFilesConverter")}</h1>

        {(isProcessing || progress > 0) && (
          <div className="video-import__progress">
            <div className="video-import__progress-row">
              <span className="video-import__progress-label">{`${t("Status")}:`}</span>
              <span className="video-import__progress-value">{progress}%</span>
            </div>
            <progress id="progress" max="100" value={progress} className="video-import__progress-bar" />
            <div id="status" className="video-import__progress-status">
              {status || `${t("wait")}...`}
            </div>
          </div>
        )}

        {/* Drag & Drop –æ–±–ª–∞—Å—Ç—å */}
        <div
          onDragOver={handleDragOver}
          onDragLeave={handleDragLeave}
          onDrop={handleDrop}
          onClick={handleFileSelect}
          className={`video-import__dropzone ${isDragging ? 'is-dragging' : ''}`}
        >
          <div className="video-import__dropzone-icon">üìÅ</div>
          <p className="video-import__dropzone-title">
            {t("DragUsmFile")}
          </p>
          <p className="video-import__dropzone-subtitle">
            {t("OnlySupportUsm")}
          </p>
        </div>

        {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ñ–∞–π–ª–µ */}
        {file && (
          <div className="video-import__file-card">
            {output === '' ? <h3>{`‚úÖ ${t("FileSelected")}:`}</h3> : <h3>{output}</h3>}
            <p><strong>{`${t("Name")}:`}</strong> {file.name}</p>

            <div className="video-import__actions">
              <button
                onClick={executeCommand}
                disabled={isProcessing}
                className={`btn btn--primary ${isProcessing ? 'is-disabled' : ''}`}
              >
                {isProcessing ? `üîÑ ${t("Processing")}...` : `üöÄ ${t("RunCommand")}`}
              </button>

              <button
                onClick={handleReset}
                className="btn btn--secondary"
              >
                {`‚ùå ${t("Reset")}`}
              </button>
              <button
                onClick={openResultFolder}
                disabled={isProcessing}
                className={`btn btn--primary ${isProcessing ? 'is-disabled' : ''} `}
              >
                {`üìÅ ${t("OpenFolder")}`}
              </button>
              <button
                onClick={openLinkInBrowser}
                className={`btn btn--primary ${!links.current[urlInfo] ? 'is-disabled' : ''}`}
                disabled={!links.current[urlInfo]}
              >
                {t("InfoAboutUsmFiles")}
              </button>
            </div>
          </div>
        )}

        <button
          onClick={() => navigate('/')}
          className="btn btn--secondary video-import__back"
        >
          {`‚Üê ${t("Back")}`}
        </button>
      </div>
    </>
  );
};

export default VideoConverterImport;
